{"version":3,"sources":["UI/Card.jsx","UI/Progress.jsx","Components/News.jsx","UI/Layout.jsx","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","margin","maxWidth","borderRadius","image","width","height","img","display","maxHeight","button","backgroundColor","color","Card","props","classes","className","Paper","elevation","Grid","container","item","ButtonBase","href","url","target","alt","src","urlImage","xs","sm","direction","Typography","gutterBottom","variant","title","description","author","date","Button","marginLeft","marginTop","Progress","CircularProgress","News","state","data","error","axios","get","then","response","modNews","articles","map","modNew","publishedAt","urlToImage","setState","catch","this","fetchData","cutStringByCharacter","key","word","character","index","indexOf","slice","renderSuccess","Component","flexDirection","justifyContent","alignItems","fontFamily","fontSize","fontWeight","reload","window","location","replace","Layout","onClick","children","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18e19d2d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ButtonBase from '@material-ui/core/ButtonBase';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n/* Estilos aplicados al Componente 'Card' */\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        margin: 'auto',\r\n        maxWidth: 600,\r\n        borderRadius: '5px'\r\n    },\r\n    image: {\r\n        width: 128,\r\n        height: 128,\r\n    },\r\n    img: {\r\n        margin: 'auto',\r\n        display: 'inline',\r\n        maxWidth: '100%',\r\n        maxHeight: '100%',\r\n        borderRadius:'5px'\r\n    },\r\n    button: {\r\n        backgroundColor: '#fff',\r\n        color: '#0066FF',\r\n        '&:hover': {\r\n          backgroundColor: '#0066FF',\r\n          color: '#fff',\r\n      },\r\n    }\r\n}));\r\n\r\n/* Textos */\r\nconst authorNotFound = 'Autor no Encontrado';\r\nconst seeMore = 'Ver más';\r\n\r\n/* \r\n    Componente 'Card' para mostrar la información de cada\r\n    uno de los items (noticias) recuperadas de la API\r\n    Recibe como parámetro (props) la información de cada item\r\n*/\r\nconst Card = (props) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Paper className={classes.paper} elevation={3}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item>\r\n                        {/* Imágen de la Noticia, Redirecciona al sitio que p¿ublica la noticia */}\r\n                        <ButtonBase className={classes.image} href={props.url} target='blank'>\r\n                            <img className={classes.img} alt=\"complex\" src={props.urlImage} />\r\n                        </ButtonBase>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm container>\r\n                        <Grid item xs container direction=\"column\" spacing={2}>\r\n                            <Grid item xs>\r\n                                {/* Título de la Noticia */}\r\n                                <Typography gutterBottom variant=\"h6\">\r\n                                    {props.title}\r\n                                </Typography>\r\n                                {/* Descripción de la Noticia */}\r\n                                <Typography variant=\"subtitle2\" gutterBottom>\r\n                                    {props.description}\r\n                                </Typography>\r\n                                {/* Autor de la Noticia - Válida si existe autor */}\r\n                                { props.author ? \r\n                                        <Typography variant=\"subtitle2\" color=\"inherit\">{props.author}</Typography> \r\n                                    : \r\n                                        <Typography variant=\"subtitle2\" color=\"inherit\">{authorNotFound}</Typography>\r\n                                }\r\n                                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                    {/* Fecha de la Noticia */}\r\n                                    {props.date}\r\n                                </Typography>\r\n                            </Grid>\r\n                            {/* Botón que redirecciona hacia el sitio de la noticia */}\r\n                            <Grid item>\r\n                                <Button className={classes.button} href={props.url} target='blank'>{seeMore}</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n            <br/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n/* Estilos usados por 'Progress' */\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    marginLeft: theme.spacing(90),\r\n    marginTop: theme.spacing(10)\r\n  },\r\n}));\r\n\r\n/* Progress renderiza un progress circular */\r\nconst Progress = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CircularProgress />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Progress;","import { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Card from '../UI/Card';\r\nimport Progress from '../UI/Progress';\r\n\r\n/* URL para realizar la petición GET */\r\nconst newsUrl = 'https://newsapi.org/v2/top-headlines?country=mx&category=business&apiKey=159a82fe42a4469abdd2b1b1272f4c9e';\r\n\r\nclass News extends Component{\r\n\r\n    /* \r\n        Definición de un estado - contiene los datos recuperados de la API \r\n        'data': Datos recuperados en formato Json\r\n        'error': Error ocurrido durante la petición\r\n    */\r\n    state = { data: null, error: null };\r\n\r\n    /* \r\n        Método para realizar una petición GET a  News-API, hace uso de 'axios' para hacer la petición GET \r\n    */\r\n    fetchData( url ){\r\n        axios.get( url )\r\n            .then( response => {\r\n                /* \r\n                    Si se completa la petición se destructuran la información para usar solo la requerida \r\n                */\r\n                const news = response.data.articles;\r\n                const modNews = news.map( (modNew) => {\r\n                    return{ \r\n                            title: modNew.title,\r\n                            author: modNew.author,\r\n                            description: modNew.description, \r\n                            date: modNew.publishedAt, \r\n                            urlImage: modNew.urlToImage,\r\n                            url: modNew.url\r\n                        }\r\n                });\r\n                /* Guarda los nuevos datos en 'data' */\r\n                this.setState({ data: modNews, error: null});\r\n            })\r\n            .catch( error => {\r\n                /* \r\n                    En caso de error guarda 'null' en data \r\n                */\r\n                this.setState({ data: null, error: error});\r\n            })\r\n    }\r\n\r\n    /* Método que ejcuta la petición a la API cuando se inicia la página o se recarga */\r\n    componentDidMount(){\r\n        this.fetchData(newsUrl);\r\n    }\r\n\r\n    /* \r\n        Método para Desplegar la información de cada noticia (item) en un Componente llamado 'Card'\r\n        Devuelve un Componente 'Card' para cada uno de los items recuperados.  \r\n    \r\n    */\r\n    renderSuccess(){\r\n        const dataJsx = this.state.data?.map( (item) => {\r\n            return <Card\r\n                key={item.key}\r\n                title={this.cutStringByCharacter(item.title, '-')}\r\n                description={item.description}\r\n                author={item.author}\r\n                date={this.cutStringByCharacter(item.date, 'T')}\r\n                urlImage={item.urlImage}\r\n                url={item.url}\r\n            />\r\n        })\r\n        return dataJsx;\r\n    }\r\n\r\n    /* Método para obtener solo una porción de un String */\r\n    cutStringByCharacter( word, character ){\r\n        const index = word.indexOf(character);\r\n        const newWord = word.slice(0, index);\r\n        return newWord;\r\n    }\r\n\r\n    /* \r\n        Método encargado de renderizar el contenido del Componente 'News' \r\n        Si los datos que devuelve la API han sido guardados en el objeto state llama al método\r\n        renderSuccess() para desplegarlos.\r\n        En caso contrario renderiza un Progress hasta que los datos esten listos.\r\n    */\r\n    render(){\r\n        if( this.state.data ){\r\n            return this.renderSuccess()\r\n        }else{\r\n            return <Progress></Progress>\r\n        }\r\n    }\r\n}\r\n\r\nexport default News;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n/* Estilos utilizados dentro del Coponente 'Layout' */\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor:'#FBFCFC'\r\n  },\r\n  paper: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent:'space-evenly',\r\n    alignItems:'center',\r\n    fontFamily:'Courier',\r\n    fontSize:'18px',\r\n    fontWeight:'bold',\r\n    color:'black'\r\n  },\r\n  button: {\r\n    backgroundColor: '#fff',\r\n    color: '#0066FF',\r\n    '&:hover': {\r\n      backgroundColor: '#0066FF',\r\n      color: '#fff',\r\n  }\r\n},\r\n}));\r\n\r\n/* Textos */\r\nconst news = 'Noticias';\r\nconst refresh = 'Actualizar';\r\n\r\n/* Función para recargar la página */\r\nconst reload = () => {\r\n    window.location.replace('');\r\n}\r\n\r\n/* Componente Layout */\r\nconst Layout = ( props ) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={3}>\r\n        <Grid className={classes.paper} item xs={12}>\r\n            <Paper elevation={0}>{news}</Paper>\r\n            {/* Botón para recargar la página - llama a la función 'reload()' cuando escucha un Click */}\r\n            <Paper elevation={0}><Button className={classes.button} onClick={reload}>{refresh}</Button></Paper>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          {/* Renderiza el Componente hijo dentro de 'Layout' */}\r\n          {props.children}\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Layout;\r\n","import { Component } from 'react';\nimport News from './Components/News';\nimport Layout from './UI/Layout';\n\n/* Componente Principal */\nclass App extends Component{\n  render(){\n    return(\n      /* \n        Renderiza el Layout Pricipal, Contiene el Componente 'News' y el botón de 'Refresh'\n      */\n      <Layout>\n        <News></News>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}